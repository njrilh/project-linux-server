//installasi CentOS -------------
ram 6gb, cpu 4, storage -+25gb
Birdge adapter
run
pilih install centos streamm 9 (paling atas)
software slection (server)
setting installasi destinasi
root pw
bikin user //optional
setting networkmanagement (ethernet automatic saja)
// ------------------------------

// cek network ------------------
sudo usermod -aG wheel nama_user // untuk mengakses seperti root

sudo nmtui //menampilakan UI untuk menyeting koneksi network

sudo systemctl restart NetworkManager // merestart network

ping 0.0.0.0 // cek ping

nmcli connection show //  # Lihat koneksi jaringan

ip a // cek ip

sudo dnf install epel-release -y // istall epel

sudo dnf install php, php-fpm, php-mysqlnd, phpmyadmin -y,

sudo dnf install nginx -y //install nginx

sudo dnf install mariadb, mariadb-server, -y // istall mariadb dan mariadb server

sudo systemctl start mariadb // nyalakan mariadb

sudo mysql // konfigurasi mysql
	SELECT user, host FROM mysql.user; // cek host dan user
	CREATE DATABASE nazril_db;
	CREATE USER 'user'@'%' IDENTIFIED BY 'pass';
	GRANT ALL PRIVILEGES ON nazril_db.* TO 'user'@'%';
	FLUSH PRIVILEGES;

sudo dnf install openssh-server -y // install openssh

sudo systemctl start sshd // jalankan ssh

sudo chown username:username /usr/share/nginx/html // Buat agar bisa di akses di sshftp untuk upload file frontend

scp "C:\...\namafile.html" username@IP:/usr/share/nginx/html /// Buka di Windows terminal untunk mengaplod file html

sudo nano /etc/nginx/conf.d/default.conf // Konfigurasi rute nginx
	server {
		listen 80;
		server_name IP;
	
		location / {
			root /usr/share/nginx/html;
			index index.html; // file html bawaan nginx
			try_files $uri $uri/ =404;
		}
sudo systemctl enable firewalld //mennyalakan firewall

sudo sysytemctl start firewalld //mengaktifkan firewall

sudo systemctl status firewalld //cek status firewall

sudo systemctl start nginx // coba di browser

sudo firewall-cmd --list-all //cek conf firewall

sudo firewall-cmd --permanent --add-service=http dan https //tambah http/s ke firewall

sudo firewall-cmd --reload //reload conf firewall

sudo firewall-cmd --permanent --add-port=80/tcp dan 3000(untuk nodejs) //tambah port 80 dan 3000 ke firewall

sudo netstat -tuln | grep:80 //

cd /usr/share/nginx/html // masuk ke dir html untuk mendapatkan index.php
	wget https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.zip
	unzip phpMyAdmin-latest-all-languages.zip
	mv phpMyAdmin-*-all-languages phpmyadmin

sudo nano /etc/nginx/conf.d/default.conf // Konfigurasi rute nginx
	server {
    		listen 80;
    		server_name 192.168.1.20;

    		location / {
    		root /usr/share/nginx/html;
    		index index.html;
        	try_files $uri $uri/ =404;
    		}

    		location /phpmyadmin {
        	root /usr/share/nginx/html;
        	index index.php;
		try_files $uri $uri/ =404;
   		}

    		location ~ \.php$ {
        	include fastcgi_params;
        	fastcgi_pass unix:/run/php-fpm/www.sock;
        	fastcgi_index index.php;
        	fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    		}
}

sudo systemctl restart nginx // coba di browser

buat database di IP/phpmyadmin
USE crud_db;

CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100)
);

sudo dnf install nodejs -y // install nodejs

cd /home/user // masuk ke dir user
mkdir drudex // buat dir crudexx
cd crudex // masuk ke dir dcrudex	
	npm -v //mengecek versi npm dan apakah nodejs sudah tersedia
	npm init -y
	npm install express, mysql2, cors, body-parser

sudo chown username:username /home/user/crudex // Buat agar bisa di akses di sshftp untuk upload file backend
scp "C:\...\namafile.js" username@IP:/home/user/crudex /// Buka di Windows terminal untunk mengaplod file js

configurasi kodingan index.js dan hime.html

node index.js // jalankan expressjs di dalam dir /home/user/crudex & buka di port :3000/api/users

//---------------------------------------------------------------------------------------------------
	const express = require("express");
	const mysql = require("mysql2");
	const bodyParser = require("body-parser");
	const cors = require("cors");

	const app = express();
	app.use(cors());
	app.use(bodyParser.json());

	const db = mysql.createConnection({
	  host: "IP",
	  user: "user",
	  password: "pass",
	  database: "nazril_db"
	});

	db.connect(err => {
	  if (err) throw err;
	  console.log("Connected to DB");
	});

	app.get("/api/users", (req, res) => {
	  db.query("SELECT * FROM users", (err, result) => {
	    if (err) return res.status(500).send(err);
	    res.json(result);
	  });
	});

	app.post("/api/users", (req, res) => {
	  const { name, email } = req.body;
	  db.query("INSERT INTO users (name, email) VALUES (?, ?)", [name, email], (err) => {
	    if (err) return res.status(500).send(err);
	    res.send("User added.");
	  });
	});

	app.delete("/api/users/:id", (req, res) => {
	  db.query("DELETE FROM users WHERE id = ?", [req.params.id], (err) => {
	    if (err) return res.status(500).send(err);
	    res.send("User deleted.");
	  });
	});

	app.listen(3000, () => {
	  console.log("API running on port 3000");
	});

//---------------------------------------------------------------------------------------------
	<!DOCTYPE html>
	<html lang="en">
	<head>
	  <meta charset="UTF-8">
	  <title>CRUD User</title>
	</head>
	<body>
	  <h2>Users</h2>
	  <ul id="user-list"></ul>

	  <h3>Add User</h3>
	  <form id="user-form">
	    <input type="text" id="name" placeholder="Name" required>
	    <input type="email" id="email" placeholder="Email" required>
	    <button type="submit">Add</button>
	  </form>

	  <script>
	    const API_URL = 'http://IP:3000/api/users';

	    async function fetchUsers() {
	      const res = await fetch(API_URL);
	      const users = await res.json();
	      const list = document.getElementById('user-list');
	      list.innerHTML = '';
	      users.forEach(user => {
	        const li = document.createElement('li');
	        li.textContent = `${user.name} (${user.email})`;
	        const delBtn = document.createElement('button');
	        delBtn.textContent = 'Delete';
	        delBtn.onclick = async () => {
	          await fetch(`${API_URL}/${user.id}`, { method: 'DELETE' });
	          fetchUsers();
	        };
	        li.appendChild(delBtn);
        	list.appendChild(li);
	      });
	    }
	
	    document.getElementById('user-form').addEventListener('submit', async e => {
	      e.preventDefault();
	      const name = document.getElementById('name').value;
	      const email = document.getElementById('email').value;
	      await fetch(API_URL, {
	        method: 'POST',
	        headers: { 'Content-Type': 'application/json' },
	        body: JSON.stringify({ name, email })
	      });
	      document.getElementById('name').value = '';
	      document.getElementById('email').value = '';
	      fetchUsers();
	    });
	
	    fetchUsers();
	  </script>
	</body>
	</html>
